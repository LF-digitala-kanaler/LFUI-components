/**
 * Spinner mixin
 **/

@mixin lf-spinner($circle-color, $inner-color, $surface-color, $spinnerSize, $animation-name) {
  position: relative;
  display: inline-block;
  background-color: $surface-color;
  border: 5px solid $surface-color;
  border-radius: 50%;
  transform: rotate(263deg);
  // IE11 and below can't process svg animations relating to most things, but stroke-dasharray is one of them.
  // Unfortunatley this completely breaks our ability to have identical animations in older IE browsers.
  // The fallback is this, a simple rotation animation on the wrapper element. At least it's something.
  -ms-animation: IEfallback $animation-time infinite linear;

  svg {
    display: block;
    width: $spinnerSize + px;
    height: $spinnerSize + px;
  }

  .lf-spinner-dash {
    // stroke-dasharray: 60, 257;
    stroke-dasharray: 240, 60;
    stroke-dashoffset: -6;
    // -ms-stroke-dasharray: 120, 257;
    -ms-stroke-dasharray: 240, 60;
    -ms-stroke-dashoffset: -6;
    stroke: $inner-color;
    fill: transparent;
    stroke-width: 9;
    transform-origin: center center;
    animation: $animation-name $animation-time infinite $animation-curve;
    -webkit-animation: $animation-name $animation-time infinite $animation-curve;
  }

  .static-circle {
    fill: $surface-color;
    stroke-dasharray: 314;
    stroke: $circle-color;
    stroke-width: 8;
  }

  .lf-spinner-forward-line {
    stroke: $white;
    stroke-width: 6px;
    transform: rotate(52deg);

    // These are tricky. Be ware changing the order of these.
    // As you can see we have no default transform origin value, as it causes browsers to default to
    // it instead of their prefixed properties... which we can't allow, cause it feks stuff up.
    -ms-transform-origin: 50% 50%; /* IE 9 */
    -moz-transform-origin: 50% 50% !important;
    //transform-origin: (0.5px * $spinnerSize) (0.5px * $spinnerSize) !important;
    -webkit-transform-origin: center; /* Chrome, Safari, Opera */
    // This animation uses a different animation curve.
    animation: forwardLineRotate $animation-time infinite cubic-bezier(0.51, 0.04, 0.46, 0.94);
  }

  .lf-spinner-back-line {
    @extend .lf-spinner-forward-line;

    stroke: $white;
    transform: rotate(7deg);
    animation: backLineRotate $animation-time infinite $animation-curve;
  }
}

/**
 * Spinner variants!
 **/

.lf-spinner {
  @include lf-spinner($blue, $red, $white, 60, spinnerDrawDash);
}

.lf-spinner-sm {
  @include lf-spinner($blue, $red, $white, 40, spinnerDrawDash);
}

.lf-spinner-xs {
  @include lf-spinner($blue, $red, $white, 25, spinnerDrawDash);
}

.lf-spinner-neg {
  @include lf-spinner(transparent, $red, transparent, 60, spinnerDrawDash);
}

.lf-spinner-neg-sm {
  @include lf-spinner(transparent, $red, transparent, 40, spinnerDrawDash);
}

.lf-spinner-neg-xs {
  @include lf-spinner(transparent, $red, transparent, 25, spinnerDrawDash);
}

// Spinner inside buttons
.lf-spinner-btn-primary {
  @include lf-spinner(transparent, $white, transparent, 20, spinnerDrawDash);
}

.lf-spinner-btn-secondary {
  @include lf-spinner(transparent, $navy, transparent, 20, spinnerDrawDash);
}

.btn.loading {
  pointer-events: none;
}

.btn > [class*="lf-spinner"] {
  border: none;
  vertical-align: middle;
  position: absolute;
  top: 50%;
  transform: translateY(-50%) rotate(263deg);
  -ms-animation: IEfallbackBtn $animation-time infinite linear;

  .lf-spinner-dash {
    stroke-width: 10px;
  }
}

.btn.loading.btn-arrow > [class*="lf-spinner"],
.btn.loading:not(.btn-block):not(.btn-arrow-left) > [class*="lf-spinner"] {
  right: 12px;
}

.btn:not([class*="arrow"]):not([class*="link"]):not(.btn-block):not(.btn-tight) {
  padding-right: 2.5rem;

  > [class*="lf-spinner"] {
    margin-left: 5px;
  }

  &.btn-sm {
    padding-right: 2.15rem;

    > [class*="lf-spinner"] {
      svg {
        width: 16 + px;
        height: 16 + px;
      }
    }
  }

  &.btn-lg {
    padding-right: 2.9rem;

    > [class*="lf-spinner"] {
      svg {
        width: 25 + px;
        height: 25 + px;
      }
    }
  }
}

.btn-block.loading:not([class*="arrow"]):not([class*="link"]):not(.btn-tight) {
  padding-right: 2.2rem;

  > [class*="lf-spinner"] {
    margin-left: 10px;
  }

  &.btn-sm {
    padding-right: 2.3rem;
  }

  &.btn-lg {
    padding-right: 2.6rem;
  }
}

.btn:not(.btn-block):not(.loading):not([class*="arrow"]):not([class*="more"]):not([class*="link"]):not(.btn-tight) {
  padding-right: 1.632rem;
  padding-left: 1.632rem;

  &.btn-sm {
    padding-right: 1.39rem;
    padding-left: 1.39rem;
  }

  &.btn-lg {
    padding-right: 1.95rem;
    padding-left: 1.95rem;
  }
}

.btn-group .btn {
  padding-right: 1.25rem !important;
  padding-left: 1.25rem !important;
}

.radio-card .btn {
  padding: 0.125rem 0.625rem !important;
}

.input-group-btn .btn {
  padding-right: 0.75rem !important;
  padding-left: 0.75rem !important;
}

// btn-arrow with spinner problem
// since btn-arrow causes content to align to the left/right depending on the arrow, we can't
// simply remove the btn-arrow class when we want the spinner. Instead we have to hide the arrow,
// using the loading class, and then absolute-position the spinner in its place.

.btn.loading {
  &.btn-arrow {
    &::after {
      display: none !important;
    }
  }

  &.btn-arrow-left {
    &::after {
      display: none !important;
    }
  }
}

.btn.btn-arrow-left > [class*="lf-spinner"] {
  left: 8px;
  right: auto;
}

/**
 * Animations
 **/

// Animate the dash
@keyframes spinnerDrawDash {
  0% {
    stroke-dasharray: 36, 257;
    stroke-dashoffset: -6;
  }

  25% {
    stroke-dashoffset: -6;
  }

  30% {
    stroke-dasharray: 240, 60;
  }

  100% {
    stroke-dasharray: 38, 258;
    stroke-dashoffset: -301;
  }
}

// And the lines
@keyframes forwardLineRotate {
  0% {
    transform: rotate(52deg);
  }

  30% {
    transform: rotate(305deg);
  }

  87% {
    transform: rotate(406deg);
  }

  100% {
    transform: rotate(409deg);
  }
}

@keyframes backLineRotate {
  0% {
    transform: rotate(7deg);
  }

  25% {
    transform: rotate(7deg);
  }

  100% {
    transform: rotate(366deg);
  }
}

@keyframes IEfallback {
  0% {
    transform: rotate(233deg);
  }

  100% {
    transform: rotate(593deg);
  }
}

@keyframes IEfallbackBtn {
  0% {
    transform: translateY(-50%) rotate(233deg);
  }

  100% {
    transform: translateY(-50%) rotate(593deg);
  }
}
