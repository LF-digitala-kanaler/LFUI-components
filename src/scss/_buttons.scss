@import "bootstrap/scss/_buttons.scss";

[role="button"] {
  cursor: pointer;
}

.btn {
  position: relative;
  overflow: hidden;
  font-family: $font-family-sans-serif;
  font-size: $font-size-lg;
  text-decoration: none;
  white-space: normal;
  cursor: pointer;
  border-width: $input-btn-border-width;
  border-radius: $btn-border-radius;
  transition: 200ms linear;
  transition-property: all;
  @include font-smoothing();
}

.btn:hover {
  text-decoration: none;
  transition: 200ms linear;
  transition-property: all;
}

@mixin button-arrow-right($color, $color-hover, $color-active, $size: standard) {
  text-align: left;
  // normal padding + arrow width + 10px;

  @if $size == small {
    padding-right: calc(#{$input-btn-padding-x-sm} - #{$input-btn-border-width} + 29px) !important;
  } @else if $size == large {
    padding-right: calc(#{$input-btn-padding-x-lg} - #{$input-btn-border-width} + 36px) !important;
  } @else {
    padding-right: calc(#{$input-btn-padding-x} - #{$input-btn-border-width} + 36px) !important;
  }

  &::after {
    @if $size == small {
      @include btn-arrow-small-right($color);

      right: calc(#{$input-btn-padding-x-sm} - #{$input-btn-border-width} * 2);
    } @else if $size == large {
      @include btn-arrow-large-right($color);

      right: calc(#{$input-btn-padding-x-lg} - #{$input-btn-border-width} * 2);
    } @else {
      @include btn-arrow-standard-right($color);

      right: calc(#{$input-btn-padding-x} - #{$input-btn-border-width} * 2);
    }
    position: absolute;

    top: 50%;
    display: inline-block;
    margin-left: .625rem;
    content: "";
    transition: transform 100ms linear;
    transform: translateX(0) translateY(-50%);
  }

  &:hover:not([disabled]),
  &:focus:not([disabled]) {
    &::after {
      @if $size == small {
        @include btn-arrow-small-right($color-hover);
      } @else if $size == large {
        @include btn-arrow-large-right($color-hover);
      } @else {
        @include btn-arrow-standard-right($color-hover);
      }
      transition: transform 100ms linear;
      transform: translateX(0) translateY(-50%);
    }
  }

  &:active:not([disabled]) {
    &::after {
      @if $size == small {
        @include btn-arrow-small-right($color-active);
      } @else if $size == large {
        @include btn-arrow-large-right($color-active);
      } @else {
        @include btn-arrow-standard-right($color-active);
      }
      transition: transform 100ms linear;
      transform: translateX(3px) translateY(-50%);
    }
  }
}

@mixin button-arrow-left($color, $color-hover, $color-active, $btn-padding, $size: standard) {
  position: relative;
  text-align: right;

  @if $size == small {
    padding-left: calc(#{$input-btn-padding-x-sm} - #{$input-btn-border-width} + 29px) !important;
  } @else if $size == large {
    padding-left: calc(#{$input-btn-padding-x-lg} - #{$input-btn-border-width} + 36px) !important;
  } @else {
    padding-left: calc(#{$input-btn-padding-x} - #{$input-btn-border-width} + 36px) !important;
  }

  &::after {
    @if $size == small {
      @include btn-arrow-small-left($color);

      left: calc(#{$input-btn-padding-x-sm} - #{$input-btn-border-width});
    } @else if $size == large {
      @include btn-arrow-large-left($color);

      left: calc(#{$input-btn-padding-x-lg} - #{$input-btn-border-width});
    } @else {
      @include btn-arrow-standard-left($color);

      left: calc(#{$input-btn-padding-x} - #{$input-btn-border-width});
    }

    position: absolute;
    top: 50%;
    display: inline-block;
    content: "";
    transform: translateX(0) translateY(-50%);
    backface-visibility: hidden;
  }

  &:hover:not([disabled]),
  &:focus:not([disabled]) {
    &::after {
      @if $size == small {
        @include btn-arrow-small-left($color-hover);
      } @else if $size == large {
        @include btn-arrow-large-left($color-hover);
      } @else {
        @include btn-arrow-standard-left($color-hover);
      }
      transition: transform 100ms linear;
      transform: translateX(0) translateY(-50%);
    }
  }

  &:focus:hover:active:not([disabled]),
  &:active:not([disabled]) {
    &::after {
      @if $size == small {
        @include btn-arrow-small-left($color-active);
      } @else if $size == large {
        @include btn-arrow-large-left($color-active);
      } @else {
        @include btn-arrow-standard-left($color-active);
      }
      transition: transform 100ms linear;
      transform: translateX(-3px) translateY(-50%);
    }
  }
}

// Primary buttons
@mixin button-custom-variant($color, $border, $bg, $bg-hover, $bg-pressed) {
  padding: calc(#{$input-btn-padding-y} - (#{$input-btn-border-width})) calc(#{$input-btn-padding-x} - #{$input-btn-border-width});
  background-color: $bg;
  border-color: $bg;
  border-radius: $btn-border-radius;

  /**
   * 1. Focus state not working as it should with box-shadow set to none that's why we use such a strange value.
   */

  &:focus,
  &.focus {
    color: $white;
    background-color: $bg;
    border-color: $border;
    box-shadow: 0 0 0 rgba(0, 0, 0, 10%); /* 1 */
  }

  &:hover,
  &:hover:focus {
    background-color: $bg-hover;
    border-color: $bg-hover;
  }

  &:active,
  &.active,
  &:active:focus,
  &:active:hover {
    background-color: $bg-pressed;
    border-color: $bg-pressed;
  }

  &:not([disabled]):not(.disabled):active,
  &:not([disabled]):not(.disabled).active,
  .show > &.dropdown-toggle {
    &,
    &:hover,
    &:focus,
    &.focus {
      background-color: $bg-pressed;
      border-color: $bg-pressed;
      box-shadow: none;
    }
  }

  &.disabled,
  &:disabled {
    &,
    &:focus,
    &.focus,
    &:hover,
    &.hover {
      pointer-events: none;
      background-color: $bg;
      border-color: $bg;
      opacity: .65;
    }
  }

  /*
  ** SIZES
  */
  &.btn-sm {
    padding: calc(#{$input-btn-padding-y-sm} - (#{$input-btn-border-width})) calc(#{$input-btn-padding-x-sm} - #{$input-btn-border-width});
    font-size: $font-size-md;
  }

  &.btn-lg {
    padding: calc(#{$input-btn-padding-y-lg} - (#{$input-btn-border-width})) calc(#{$input-btn-padding-x-lg} - #{$input-btn-border-width});
    font-size: $font-size-xl;
    line-height: $input-btn-line-height-lg;
  }

  /*
  ** WITH ARROW
  */
  &.btn-arrow {
    @include button-arrow-right($white, $white, $white, standard);

    padding-right: 8px;
  }

  &.btn-arrow-left {
    @include button-arrow-left($white, $white, $white, $input-btn-padding-x, standard);
  }

  /*
  ** WITH ARROW && DIFFERENT SIZE
  */
  &.btn-sm.btn-arrow {
    @include button-arrow-right($white, $white, $white, small);

    padding-right: 8px;
  }

  &.btn-lg.btn-arrow {
    @include button-arrow-right($white, $white, $white, large);
    padding-right: 12px;

    line-height: $input-btn-line-height-lg;
  }

  &.btn-sm.btn-arrow-left {
    @include button-arrow-left($white, $white, $white, $input-btn-padding-x-sm, small);
  }

  &.btn-lg.btn-arrow-left {
    @include button-arrow-left($white, $white, $white, $input-btn-padding-x-lg, large);
  }

  /*
  ** AS BLOCKS
  */
  &.btn-block {
    position: relative;
  }

  &.btn-block.btn-arrow {
    padding-right: 45px;

    &::after {
      position: absolute;
      top: 50%;
      right: .6rem;
      content: "";
      transform: translateY(-50%);
    }

    &:hover:not([disabled]),
    &:focus:not([disabled]) {
      &::after {
        transition: transform 100ms linear;
        transform: translateX(0) translateY(-50%);
      }
    }

    &:active:not([disabled]) {
      &::after {
        transition: transform 100ms linear;
        transform: translateX(3px) translateY(-50%);
      }
    }
  }

  &.btn-block.btn-arrow-left {
    &::after {
      top: 50%;
      transform: translateX(0) translateY(-50%);
    }

    &:hover:not([disabled]),
    &:focus:not([disabled]),
    &:focus:hover:not([disabled]) {
      &::after {
        margin-left: 0;
        transition: transform 100ms linear;
        transform: translateX(0) translateY(-50%);
      }
    }

    &:active:not([disabled]),
    &:focus:hover:active:not([disabled]) {
      &::after {
        transition: transform 100ms linear;
        transform: translateX(-3px) translateY(-50%);
      }
    }
  }
}

// alert buttons
@mixin button-custom-outline-alert-variant($border) {
  padding: calc(#{$input-btn-padding-y-sm} - (#{$input-btn-border-width})) calc(#{$input-btn-padding-x-sm} - #{$input-btn-border-width});
  font-size: $font-size-md;
  color: inherit;
  background-color: transparent;
  border-color: $border;

  &:hover,
  &:focus,
  &:active {
    color: inherit;
    background-color: transparent;
    border-color: $border;
    box-shadow:
      inset 0 0 0 1px $border,
      inset 0 0 0 1px $border,
      inset 0 0 0 1px $border,
      inset 0 0 0 1px $border;
  }

  &:not([disabled]):not(.disabled):active,
  &:not([disabled]):not(.disabled).active {
    &,
    &:hover,
    &:focus:hover,
    &.focus {
      color: $border;
      background-color: transparent;
      border-color: $border;
      box-shadow:
        inset 0 0 0 1px $border,
        inset 0 0 0 1px $border,
        inset 0 0 0 1px $border,
        inset 0 0 0 1px $border;
    }
  }

  &.disabled,
  &:disabled {
    &,
    &:focus,
    &.focus,
    &:hover,
    &.hover {
      color: $border;
      pointer-events: none;
      background-color: transparent;
      border-color: $border;
      box-shadow: none;
      opacity: .65;
    }
  }
}

// Secondary buttons
@mixin button-custom-outline-variant($color, $border, $bg, $border-hover, $bg-pressed) {
  padding: calc(#{$input-btn-padding-y} - (#{$input-btn-border-width})) calc(#{$input-btn-padding-x} - #{$input-btn-border-width});
  color: $border;
  background-color: $bg;
  border-color: $border;
  border-radius: $btn-border-radius;

  &:focus,
  &.focus,
  &:hover,
  &:hover:focus,
  &:not(:disabled):not(.disabled):active:focus {
    color: $border-hover;
    background-color: $bg;
    border-color: $border-hover;
    box-shadow:
      inset 0 0 0 1px $border-hover,
      inset 0 0 0 1px $border-hover,
      inset 0 0 0 1px $border-hover,
      inset 0 0 0 1px $border-hover;
  }

  &:active,
  &.active,
  &:active:hover,
  &:active:focus,
  &.focus {
    color: $border-hover;
    background-color: $bg-pressed;
    border-color: $border-hover;
    box-shadow:
      inset 0 0 0 1px $border-hover,
      inset 0 0 0 1px $border-hover,
      inset 0 0 0 1px $border-hover,
      inset 0 0 0 1px $border-hover;
  }

  &:not([disabled]):not(.disabled):active,
  &:not([disabled]):not(.disabled).active,
  .show > &.dropdown-toggle {
    &,
    &:hover,
    &:focus:hover,
    &.focus {
      color: $border-hover;
      background: $bg-pressed;
      border-color: $border-hover;
      box-shadow:
        inset 0 0 0 1px $border-hover,
        inset 0 0 0 1px $border-hover,
        inset 0 0 0 1px $border-hover,
        inset 0 0 0 1px $border-hover;
    }
  }

  &.disabled,
  &:disabled {
    &,
    &:focus,
    &.focus,
    &:hover,
    &.hover {
      color: $border;
      pointer-events: none;
      background-color: inherit;
      border-color: $border;
      box-shadow: none;
      opacity: .65;
    }
  }

  /*
  ** SIZES
  */
  &.btn-sm {
    padding: calc(#{$input-btn-padding-y-sm} - (#{$input-btn-border-width})) calc(#{$input-btn-padding-x-sm} - #{$input-btn-border-width});
    font-size: $font-size-md;
  }

  &.btn-lg {
    padding: calc(#{$input-btn-padding-y-lg} - (#{$input-btn-border-width})) calc(#{$input-btn-padding-x-lg} - #{$input-btn-border-width});
    font-size: $font-size-xl;
    line-height: $input-btn-line-height-lg;
  }

  /*
  ** WITH ARROW
  ** ARROW RIGHT
  */
  &.btn-arrow {
    @include button-arrow-right($border, $border-hover, $border-hover, standard);

    padding-right: 8px;
  }

  /*
  ** ARROW LEFT
  */
  &.btn-arrow-left {
    @include button-arrow-left($border, $border-hover, $border-hover, $input-btn-padding-x, standard);
  }

  /*
  ** WITH ARROW && DIFFERENT SIZE
  */
  &.btn-sm.btn-arrow {
    @include button-arrow-right($border, $border-hover, $border-hover, small);

    padding-right: 8px;
  }

  &.btn-lg.btn-arrow {
    @include button-arrow-right($border, $border-hover, $border-hover, large);

    padding-right: 12px;
  }

  &.btn-sm.btn-arrow-left {
    @include button-arrow-left($border, $border-hover, $border-hover, $input-btn-padding-x-sm, small);
  }

  &.btn-lg.btn-arrow-left {
    @include button-arrow-left($border, $border-hover, $border-hover, $input-btn-padding-x-lg, large);
  }

  /*
  ** AS BLOCKS
  */
  &.btn-block {
    position: relative;
  }

  &.btn-block.btn-arrow {
    padding-right: 45px;

    &::after {
      position: absolute;
      top: 50% !important;
      right: .6rem;
      content: "";
      transform: translateY(-50%);
    }

    &:hover:not([disabled]),
    &:focus:not([disabled]) {
      &::after {
        transition: transform 100ms linear;
        transform: translateX(0) translateY(-50%);
      }
    }

    &:active:not([disabled]) {
      &::after {
        transition: transform 100ms linear;
        transform: translateX(3px) translateY(-50%);
      }
    }
  }

  &.btn-block.btn-arrow-left {
    &::after {
      top: 50% !important;
      transform: translateX(0) translateY(-50%);
    }

    &:hover:not([disabled]),
    &:focus:not([disabled]),
    &:focus:hover:not([disabled]) {
      &::after {
        margin-left: 0;
        transition: transform 100ms linear;
        transform: translateX(0) translateY(-50%);
      }
    }

    &:active:not([disabled]),
    &:focus:hover:active:not([disabled]) {
      &::after {
        transition: transform 100ms linear;
        transform: translateX(-3px) translateY(-50%);
      }
    }
  }
}

/**
 * Variants
 */

.btn-primary {
  @include button-custom-variant($btn-primary-color, $btn-primary-border, $btn-primary-bg, $btn-primary-bg-hover, $btn-primary-bg-pressed);
}

/* Outlined */

.btn-outline-secondary,
.btn-secondary {
  @include button-custom-outline-variant($btn-secondary-color, $btn-secondary-border, transparent, $btn-secondary-border-hover, $btn-secondary-bg-pressed);
}

.btn-default {
  padding: $input-btn-padding-y-sm $input-btn-padding-x-sm;
  font-size: $font-size-md;

  @include button-custom-outline-variant($btn-secondary-color, $btn-secondary-border, transparent, $btn-secondary-border-hover, $btn-secondary-bg-pressed);
}

.btn-outline-info {
  @include button-custom-outline-alert-variant($btn-info-border);
}

.btn-outline-success {
  @include button-custom-outline-alert-variant($btn-success-border);
}

.btn-outline-warning {
  @include button-custom-outline-alert-variant($btn-warning-border);
}

.btn-outline-danger {
  @include button-custom-outline-alert-variant($btn-danger-border);
}

/**
 * Link button
 */

a.btn:active {
  opacity: 1;
}

.btn-link {
  position: relative;
  margin: 0;

  font-family: inherit;
  font-size: $font-size-md;
  line-height: 1.46;
  vertical-align: baseline !important;
  background-position-y: 1.15rem;
  border: 0;
  transition: none;

  @include link();

  @include font-smoothing(auto);

  &.btn-link-margin {
    margin-right: 2rem !important;
  }

  &:active {
    color: #02234a;
  }

  &::after {
    position: absolute;
    top: 0;
    left: 0;
    box-sizing: content-box;
    width: 100%;
    height: 100%;
    padding: $input-btn-padding-y $input-btn-padding-x;
    content: "";
  }
}

/**
 * As blocks
 */

.btn-link.btn-block {
  @include link();
  display: block;

  width: 100%;
  line-height: 1.1;
  text-align: center;
  text-decoration: none;

  &:hover,
  &:active {
    text-decoration: none;
  }

  &::after {
    // the content prevents from triggering states, so hiding it
    display: none;
  }
}

/**
 * Large link button
 */
@mixin btn-link-variant($color, $color-hover, $color-pressed, $arrow-position: right) {
  position: relative;
  padding: 0 3px 0 0;
  font-family: $font-family-sans-serif;
  font-size: $font-size-lg;
  font-weight: 700;
  color: $color;
  text-align: left;
  text-decoration: none;
  white-space: normal;
  cursor: pointer;
  background: transparent;
  border: 0;
  transition: 200ms linear;
  transition-property: all;
  @include font-smoothing();

  @if $arrow-position == left {
    padding: 0 0 0 43px;
  }

  // arrow
  @if $arrow-position == right {
    &::after {
      position: relative;

      bottom: -3px;
      display: inline-block;
      height: 18px;
      margin-left: .625rem;
      content: "";
      border: 0;
      transition: transform 100ms linear;

      @include btn-arrow-standard-right($color);
    }
  } @else {
    &::before {
      position: relative;

      bottom: -3px;
      display: inline-block;
      height: 18px;
      margin-right: .625rem;
      margin-left: -40px;
      content: "";
      border: 0;
      transition: transform 100ms linear;
      transform: translateX(0) translateY(0);
      backface-visibility: hidden;

      @include btn-arrow-standard-left($color);
    }
  }

  //states
  &:hover:not([disabled]),
  &:focus:not([disabled]),
  &:focus:hover:not([disabled]) {
    color: $color-hover;
    text-decoration: none;
    background: transparent;

    @if $arrow-position == right {
      &::after {
        @include btn-arrow-standard-right($color-hover);
        height: 18px;
        transform: translateX(0);
      }
    } @else {
      &::before {
        @include btn-arrow-standard-left($color-hover);
        height: 18px;
        transform: translateZ(-1000px) translateX(0) translateY(0%);
      }
    }
  }

  &:active:not([disabled]):not(.disabled),
  &:hover:active:not([disabled]):not(.disabled),
  &:focus:active:hover:not([disabled]):not(.disabled) {
    color: $color-pressed;
    opacity: 1;

    @if $arrow-position == right {
      &::after {
        @include btn-arrow-standard-right($color-pressed);
        height: 18px;
        transition: transform 100ms linear;
        transform: translateX(3px);
      }
    } @else {
      &::before {
        @include btn-arrow-standard-left($color-pressed);
        height: 18px;
        transform: translateX(-3px);
      }
    }
  }

  // as a block
  &.btn-block {
    text-align: center;

    a {
      color: $color;
    }

    &:hover {
      a {
        color: $color-hover;
      }
    }

    &:active,
    &:hover:active,
    &:focus:active {
      a {
        color: $color-pressed;
        opacity: 1;
      }
    }
  }

  // in different sizes, yo
  &.btn-sm {
    font-size: $font-size-md;

    @if $arrow-position == right {
      &::after {
        @include btn-arrow-small-right($color);
        bottom: 0;

        margin-left: .625rem;
      }

      &:hover::after,
      &:focus::after,
      &:focus:hover::after {
        @include btn-arrow-small-right($color-hover);

        bottom: 0;
      }

      &:active:not([disabled]):not(.disabled),
      &:hover:active:not([disabled]):not(.disabled),
      &:focus:active:hover:not([disabled]):not(.disabled) {
        &::after {
          @include btn-arrow-small-right($color-pressed);
        }
      }
    } @else {
      &::before {
        @include btn-arrow-small-left($color);
        bottom: 0;

        margin-left: -38px;
      }

      &:hover::before,
      &:focus::before,
      &:focus:hover::before {
        @include btn-arrow-small-left($color-hover);

        bottom: 0;
      }

      &:active:not([disabled]):not(.disabled),
      &:hover:active:not([disabled]):not(.disabled),
      &:focus:active:hover:not([disabled]):not(.disabled) {
        &::before {
          @include btn-arrow-small-left($color-pressed);
        }
      }
    }
  }

  &.btn-lg {
    font-size: $font-size-xl;
    line-height: $input-btn-line-height-lg;

    @if $arrow-position == right {
      &::after {
        @include btn-arrow-large-right($color);

        bottom: -3px;
      }

      &:hover::after,
      &:focus::after,
      &:focus:hover::after {
        @include btn-arrow-large-right($color-hover);

        bottom: -3px;
      }

      &:active:not([disabled]):not(.disabled),
      &:hover:active:not([disabled]):not(.disabled),
      &:focus:active:hover:not([disabled]):not(.disabled) {
        &::after {
          @include btn-arrow-large-right($color-pressed);
        }
      }
    } @else {
      padding-left: 43px;

      &::before {
        @include btn-arrow-large-left($color);

        bottom: -3px;
      }

      &:hover::before,
      &:focus::before,
      &:focus:hover::before {
        @include btn-arrow-large-left($color-hover);

        bottom: -3px;
      }

      &:active:not([disabled]):not(.disabled),
      &:hover:active:not([disabled]):not(.disabled),
      &:focus:active:hover:not([disabled]):not(.disabled) {
        &::before {
          @include btn-arrow-large-left($color-pressed);
        }
      }
    }
  }
}

.btn-link-lg,
.primary-link {
  @include btn-link-variant($wine, $btn-primary-bg-hover, $btn-primary-bg-pressed);

  a,
  span {
    margin-right: -4px;
  }
}

.primary-link::after,
.primary-link::before {
  height: 17px !important;
}

.btn-link-lg-left,
.primary-link-left {
  @include btn-link-variant($wine, $btn-primary-bg-hover, $btn-primary-bg-pressed, left);
}

.arrow-right {
  @include btn-link-variant($blue, $btn-secondary-border, $btn-secondary-border-hover);

  &::after {
    bottom: -3px;
    margin-left: .625rem;
  }
}

.arrow-left {
  @include btn-link-variant($blue, $btn-secondary-border, $btn-secondary-border-hover, left);

  &::before {
    bottom: -3px;
    margin-right: .625rem;
  }
}

/**
 * Log in/Log out
 */

.btn-login-logout {
  padding: $input-btn-padding-y $input-btn-padding-x;
  font-size: 15px;
  line-height: 1.3;
  color: $white;
  background-color: $btn-login-logout-bg;
  border-radius: $btn-border-radius;

  &:focus,
  &:hover,
  &:hover:focus {
    color: $white;
    background-color: $btn-login-logout-bg-hover;
  }

  &:active:focus,
  &:hover:active {
    color: $white;
    background-color: $btn-login-logout-bg-pressed;
  }
}

.btn-sm.btn-link {
  @include warning("btn-link does not support btn-sm");
}

/**
 * 'Läs mer'-button
*/

.btn-more {
  padding: 0;
  font-family: $font-family-sans-serif;
  font-size: $font-size-md;
  font-weight: 700;
  line-height: 1.5rem;
  color: $blue;
  background-color: transparent;
  border-width: 0;

  &.btn-lg {
    font-size: $font-size-lg;
    line-height: $input-btn-line-height-lg;
  }

  &.btn-sm {
    font-size: $font-size-sm;
  }

  &:focus {
    box-shadow: 0 0 0 rgba(0, 0, 0, 10%);
  }

  &:hover,
  &:focus,
  &:hover:focus {
    color: $btn-secondary-bg-hover;

    &::after {
      width: 12px;
      height: 10px;
      background-image: url('data:image/svg+xml;charset=UTF-8,%3Csvg width="12" height="8" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"%3E%3Cdefs%3E%3Cpath id="a" d="M6 3.4 1.7 7.7.3 6.3 6 .6l5.7 5.7-1.4 1.4z"/%3E%3C/defs%3E%3Cg fill="none" fill-rule="evenodd"%3E%3Cuse fill="%23005AA0" xlink:href="%23a" transform="rotate(180 6 4)"/%3E%3Cpath d="M12-2H0V8h12z"/%3E%3C/g%3E%3C/svg%3E');
    }
  }

  &:active,
  &:hover:active,
  &:hover:active:focus {
    color: $btn-secondary-border-hover;
    opacity: .6;

    &::after {
      width: 12px;
      height: 10px;
      background-image: url('data:image/svg+xml;charset=UTF-8,%3Csvg width="12" height="8" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"%3E%3Cdefs%3E%3Cpath id="a" d="M6 3.4 1.7 7.7.3 6.3 6 .6l5.7 5.7-1.4 1.4z"/%3E%3C/defs%3E%3Cg fill="none" fill-rule="evenodd"%3E%3Cuse fill="%23005AA0" xlink:href="%23a" transform="rotate(180 6 4)"/%3E%3Cpath d="M12-2H0V8h12z"/%3E%3C/g%3E%3C/svg%3E');
      opacity: .6;
    }
  }

  &::after {
    position: relative;
    top: -1px;
    display: inline-block;
    width: 12px;
    height: 10px;
    margin-left: .3125rem;
    vertical-align: middle;
    cursor: pointer;
    content: "";
    background-image: url('data:image/svg+xml;charset=UTF-8,%3Csvg width="12" height="8" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"%3E%3Cdefs%3E%3Cpath id="a" d="M6 3.4 1.7 7.7.3 6.3 6 .6l5.7 5.7-1.4 1.4z"/%3E%3C/defs%3E%3Cg fill="none" fill-rule="evenodd"%3E%3Cuse fill="%23005AA0" xlink:href="%23a" transform="rotate(180 6 4)"/%3E%3Cpath d="M12-2H0V8h12z"/%3E%3C/g%3E%3C/svg%3E');
    background-repeat: no-repeat;
    background-position: center;
    background-size: 12px;
  }

  &[aria-expanded="true"] {
    &::after {
      transform: scaleY(-1);
    }
  }
}

.btn-sm-block {
  @include media-breakpoint-down(sm) {
    display: block;
    width: 100%;

    + .btn-sm-block {
      margin-top: $btn-block-spacing-y;
    }
  }
}
